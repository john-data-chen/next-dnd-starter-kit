// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id              String @id @map("_id") @db.ObjectId
  email           String @unique
  password        String?
  image           String?
  name            String
  role            UserRole @default(USER)
  accounts        Account[]
  sessions        Session[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
  createdProjects Project[]
  assignTasks     Task[] @relation("assigner")
  ownedTasks      Task[] @relation("owner")
}

model Account {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  userId            String @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
  @@unique([identifier, token])
}

model ResetPasswordToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  email      String
  token      String   @unique
  expires    DateTime
  @@unique([email, token])
}

model Project {
  id        String @id @map("_id") @db.ObjectId
  title     String
  tasks     Task[]
  creatorId String @db.ObjectId
  creator   User @relation(fields: [creatorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Task {
  id         String @id @map("_id") @db.ObjectId
  projectId  String @db.ObjectId
  project    Project @relation(fields: [projectId], references: [id])
  title      String
  userId     String @db.ObjectId
  assigner   User @relation("assigner", fields: [userId], references: [id])
  owner      User @relation("owner", fields: [userId], references: [id])
  dueDate    DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}